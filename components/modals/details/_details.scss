:root {
    --detailsTasksMaxHeight: 45cqh;
}

.detailView_Tasks {
    --detailsTasksMaxHeight: 75cqh;
}

.media {
    position: relative;
    .mediaOverlay {
        top: 0;
        left: 0;
        z-index: 1;
        width: 100%;
        height: 100%;
        position: absolute;
        .removeAttachmentButton {
            opacity: 0;
            float: right;
            pointer-events: none;
            transition: var(--transition);
        }
        &:hover {
            .removeAttachmentButton {
                opacity: 1;
            }
        }
    }
}

.alertDetailsComponent {
    gap: 15px;
    width: 100%;
    display: grid;
    form {
        input, textarea {
            background: var(--darkCheckBox) !important;
        }
    }
}

.alertTitle {
    max-width: unset !important;
    .itemDetailsChangeLabel {
        width: 100%;
        display: flex;
        margin-left: 0px !important;
    }
}

.createTaskButton {
    grid-gap: 6px;
    padding-left: 10px;
}

.itemDetailsForm {
    width: 100% !important;
    justify-content: flex-start !important;
}

.invalidSelectedImage {
    opacity: 0 !important;
    max-width: 0 !important;
    pointer-events: none !important;
}

.buttonComponent {
    display: flex;
    border-radius: 4px;
    padding: 10px 15px;
    background: white;
    align-items: center;
    color: var(--gameBlue);
    justify-content: center;
    transition: var(--transition);
    &.detailsCloseButton {
        min-height: 50px;
    }
    &:hover {
        color: white !important;
        background: var(--gameBlue);
        i {
            color: white !important;
        }
    }
}

.taskFormToggleButton {
    grid-gap: 5px;
    font-size: 12px;
    align-items: center;
    padding: 3px 5px !important;
    i {
        font-size: 12px;
        color: var(--gameBlue);
    }
}

.detailsStartContent {
    display: flex;
    grid-gap: 25px;
    align-items: center;
    flex-direction: column;
    justify-content: flex-start;
}

.MuiDialog-root {
    &:has(.detailsDialog) {
        backdrop-filter: blur(10px);
        .MuiDialog-container {
            width: 100%;
        }
        .detailsDialog {
            color: white;
            min-width: 95dvw;
            background: var(--detailViewBG3) !important;
            .detailsDialogAlert {
                top: 0;
                opacity: 1;
                width: 100%;
                height: 100%;
                transform: translateY(0px);
                padding: 20px 15px 15px 65px;
                background: transparent !important;
                backdrop-filter: blur(0px) !important;
                transition: opacity 0.3s ease-out, transform 0.3s ease-out;
                .alertTitleRow {
                    width: 100%;
                    grid-gap: 15px;
                    align-items: center;
                    padding-bottom: 12px;
                }
                .detailsDialogAlertInner {
                    max-width: 100%;
                    max-height: 100%;
                }
            }
        }
    }
}

.detailsComponent {
    width: 100%;
    display: flex;
    .subTaskItems {
        overflow: auto;
        transition: var(--transition);
        max-height: var(--detailsTasksMaxHeight);
    }
    &:has(.attachmentSlide) {
        .detailViewImage {
            max-height: 400px;
        }
    }
    &.overflowingTasks {
        .formTop {
            align-items: flex-start;
            .detailEdge {
                padding-top: 10px;
            }
        }
    }
    .taskElement {
        flex-direction: column;
        .subtaskAddForm {
            width: 100%;
            min-height: 35px;
            max-height: unset;
            align-items: center;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            &::before {
                background: transparent;
            }
            .createTaskButton {
                color: white;
                padding-left: 5px;
                align-self: center;
                padding-right: 5px;
                background: transparent;
                transition: var(--transition);
                &:hover {
                    background: black;
                }
                .itemLength {
                    &.index {
                        display: none;
                    }
                }
            }
        }
    }
}