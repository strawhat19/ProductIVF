:root {
    --lightCheckBox: rgba(255, 61, 0, 0.2);
    --darkCheckBox: rgba(0, 194, 255, 0.2);
    --whiteGlassInvert: rgba(191, 230, 244, 1);
}

.columnStats {
    max-width: fit-content !important;
}

.detailsButton {
    border-radius: 0 !important;
}

.boardItem {
    &.complete {
        .boardTask {
            &.complete {
                .itemOrder {
                    .itemIndex {
                        color: var(--gameBlueInverse) !important;
                    }
                }
                .changeLabel {
                    color: black;
                }
                .itemButtons {
                    filter: invert(0) !important;
                }
            }
        }
    }
    &:not(:hover) {
        &:not(.complete) {
            .boardTaskDraggableWrap {
                &:has(.complete) {
                    .boardTask {
                        &.complete {
                            color: black;
                            background: linear-gradient(90deg, black 35px, var(--whiteGlassInvert) 35px) !important;
                            .itemButtons {
                                input {
                                    &.task_check_box {
                                        &::before {
                                            color: black !important;
                                        }
                                    }
                                }
                                button {
                                    background: black;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    &:not(&:has(.itemFooter)) {
        .progress {
            padding: 3px;
        }
    }
    &.itemHoverToExpand {
        &:not(:hover) {
            --boardItemHeight: 58px;
            &:has(.itemFooter) {
                --boardItemHeight: 71px;
            }
            overflow-y: hidden;
            height: var(--boardItemHeight) !important;
            min-height: var(--boardItemHeight) !important;
            max-height: var(--boardItemHeight) !important;
        }
    }
}

.cursorGrab {
    cursor: grab !important;
    &:has(:active) {
        cursor: grabbing !important;
    }
}

.stretchEditable {
    max-width: unset !important;
}

.droppableSubtasksArea {
    display: block;
}

.draggableItem {
    &:hover {
        .taskComponentBG {
            color: black;
            &.itemButtons {
                filter: invert(0) !important;
                input {
                    &.task_check_box {
                        filter: invert(0) !important;
                        background: var(--darkCheckBox) !important;
                    }
                }
                button {
                    filter: invert(1) !important;
                }
            }
        }
    }
}

._tasks {
    width: 100%;
    grid-gap: 0;
    display: flex;
    // padding: 10px 0;
    flex-direction: column;
}

._task {
    width: 100%;
    background: var(--blackGlass);
}

.layoutButton {
    &.activeLayout {
        &:focus {
            filter: invert(1) !important;
        }
        background: black;
        color: white !important;
    }
}

.multiCol {
    .column2Layout {
        display: none;
    }
    .column3Layout {
        display: none;
    }
}

.columns_2 {
    .column3Layout {
        display: none;
    }
}

@media (min-width: 855px) {
    .layoutCols_3 {
        &:not(.multiCol) {
            .listItems {
                display: grid !important;
                min-height: auto !important;
                grid-template-columns: auto auto auto;
            }
        }
    }
}

@media (min-width: 600px) {
    .layoutCols_2 {
        &:not(.multiCol) {
            .listItems {
                display: grid !important;
                min-height: auto !important;
                grid-template-columns: auto auto;
            }
        }
    }
}

@media (max-width: 855px) {
    .column3Layout {
        display: none !important;
    }
}

@media (max-width: 600px) {
    .column2Layout {
        display: none !important;
    }
}